{"/eslint-config":{"title":"@jdion/eslint-config","data":{"":"Lint and format code (No Prettier)\nDesigned to work with TypeScript, React\nLint support for json, yaml, markdown files\nnpm install -D eslint @jdion/eslint-config\npnpm add -D eslint @jdion/eslint-config\nyarn add -D eslint @jdion/eslint-config","usage#Usage":"Create a ESLint configuration file .eslintrc with:\n{\n  \"extends\": \"@jdion\"\n}","add-lint-scripts#Add lint scripts":"In your package.json add the following scripts:\n{\n  \"scripts\": {\n    \"lint\": \"eslint .\",\n    \"lint:fix\": \"eslint . --fix\"\n  }\n}","faq#FAQ":"Why not using Prettier?\nI prefer to use ESLint for formatting my code as it provides more fine-grained customization options. In addition to linting, ESLint can also be used to format code according to your preferences. Personally, I don't find the printWidth feature in Prettier to be particularly useful for my projects, so I choose to stick with ESLint."}},"/":{"title":"Home","data":{"":"Common modules for building web applications.\nModule\tVersion\tDescription\t@jdion/cast\t\tGoogle Cast module for the Browser\t@jdion/cast-react\t\tExtended version of @jdion/cast for React\t@jdion/eslint-config\t\tLint config for TypeScript, React projects","check-also#Check Also":"web-dev.nvim - Small Neovim configuration written in Lua that is specifically designed for web development.\nawesome-emails - A collection of awesome frameworks, templates, tools, workflows and many more to build better emails.","license#License":"MIT License Â© 2023-PRESENT Jonathan Dion"}},"/cast":{"title":"Chromecast Library for the Browser","data":{"":"@jdion/cast is a lightweight and intuitive API designed to simplify communication with Chromecast devices directly from your web browser.\nnpm i @jdion/cast\npnpm i @jdion/cast\nyarn add @jdion/cast\nExamples Â·\nGitHub Repository","getting-started#Getting Started":"To initiate a cast session, simply call the startCast method from the player object of the Cast class instance:\nimport { Cast } from \"@jdion/cast\"\n(async () => {\n  const { player } = new Cast()\n  await player.startCast('https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4')\n})()","react#React":"React hooks for @jdion/cast. This library adds some convenience methods when working with React & makes it a little easier to passing around the cast instance.\nnpm i @jdion/cast @jdion/cast-react\npnpm i @jdion/cast @jdion/cast-react\nyarn add @jdion/cast @jdion/cast-react","initiating#Initiating":"Create a Cast instance from @jdion/cast\nimport { Cast } from \"@jdion/cast\"\nconst cast = = new Cast()","adding-the-cast-provider#Adding the Cast Provider":"Import the CastProvider component from the @jdion/cast-react package. Pass your initialized Cast instance to the instance prop of CastProvider.\nimport { CastProvider } from \"@jdion/cast-react\"\nconst cast = = new Cast()\nconst App = () => {\n  <CastProvider instance={cast}>\n    {children}\n  </CastProvider>\n}","initiating-casting#Initiating Casting":"Import the useCast hook from the @jdion/cast-react package:\nimport { useCast } from \"@jdion/cast-react\"\nconst MyComponent = () => {\n  const { player } = useCast()\n  return null;\n}","start-casting#Start Casting":"To start casting, use the startCast method from the player object:\nimport { useCast } from \"@jdion/cast-react\"\nconst MyComponent = () => {\n  const { player } = useCast()\n  const startCast = async () => {\n    await player.startCast('https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4')\n  }\n return (\n   <button onClick={startCast}>Cast</button>\n )\n}","done-#Done ðŸŽ‰":"You should now have the capability to cast your media. For more complex use cases, please explore the examples folder. If you're interested in enhancing the documentation, feel free to contribute."}}}